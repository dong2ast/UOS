
FirstGccApplication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000024a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000024a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a41  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e6  00000000  00000000  00000d49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000422  00000000  00000000  0000162f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000473  00000000  00000000  00001b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000211  00000000  00000000  00001f77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002188  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	59 c0       	rjmp	.+178    	; 0xc8 <__vector_5>
  16:	00 00       	nop
  18:	66 c0       	rjmp	.+204    	; 0xe6 <__vector_6>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	66 d0       	rcall	.+204    	; 0x176 <main>
  aa:	93 c0       	rjmp	.+294    	; 0x1d2 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <timer_init>:

volatile bool trigger = false;

void timer_init()
{
	TCCR1A = 0x82;
  ae:	82 e8       	ldi	r24, 0x82	; 130
  b0:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0x1B;
  b2:	8b e1       	ldi	r24, 0x1B	; 27
  b4:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 4999;
  b6:	87 e8       	ldi	r24, 0x87	; 135
  b8:	93 e1       	ldi	r25, 0x13	; 19
  ba:	97 bd       	out	0x27, r25	; 39
  bc:	86 bd       	out	0x26, r24	; 38
	OCR1A = 375;
  be:	87 e7       	ldi	r24, 0x77	; 119
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	9b bd       	out	0x2b, r25	; 43
  c4:	8a bd       	out	0x2a, r24	; 42
  c6:	08 95       	ret

000000c8 <__vector_5>:
}

SIGNAL(INT4_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
	trigger = true;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <__vector_6>:

SIGNAL(INT5_vect)
{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
	trigger = false;
  f0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
}
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <getchar0>:

unsigned char getchar0() {
	while (!(UCSR0A & (1 << RXC0))); // RXC0 비트를 확인하여 데이터 수신 대기
  fe:	5f 9b       	sbis	0x0b, 7	; 11
 100:	fe cf       	rjmp	.-4      	; 0xfe <getchar0>
	return UDR0;
 102:	8c b1       	in	r24, 0x0c	; 12
}
 104:	08 95       	ret

00000106 <moveMotor>:

void moveMotor(bool trigger){
	if (trigger) {
 106:	88 23       	and	r24, r24
 108:	79 f0       	breq	.+30     	; 0x128 <moveMotor+0x22>
		OCR1A = SERVO_DEG_M60;
 10a:	8a ef       	ldi	r24, 0xFA	; 250
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	9b bd       	out	0x2b, r25	; 43
 110:	8a bd       	out	0x2a, r24	; 42
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 112:	88 eb       	ldi	r24, 0xB8	; 184
 114:	9b e0       	ldi	r25, 0x0B	; 11
 116:	05 c0       	rjmp	.+10     	; 0x122 <moveMotor+0x1c>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 118:	e0 e9       	ldi	r30, 0x90	; 144
 11a:	f1 e0       	ldi	r31, 0x01	; 1
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <moveMotor+0x16>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 120:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 122:	00 97       	sbiw	r24, 0x00	; 0
 124:	c9 f7       	brne	.-14     	; 0x118 <moveMotor+0x12>
 126:	08 95       	ret
		_delay_ms(300);
		} else {
		OCR1A = SERVO_DEG_P60;
 128:	84 ef       	ldi	r24, 0xF4	; 244
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	9b bd       	out	0x2b, r25	; 43
 12e:	8a bd       	out	0x2a, r24	; 42
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 130:	88 eb       	ldi	r24, 0xB8	; 184
 132:	9b e0       	ldi	r25, 0x0B	; 11
 134:	05 c0       	rjmp	.+10     	; 0x140 <moveMotor+0x3a>
 136:	e0 e9       	ldi	r30, 0x90	; 144
 138:	f1 e0       	ldi	r31, 0x01	; 1
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <moveMotor+0x34>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 13e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 140:	00 97       	sbiw	r24, 0x00	; 0
 142:	c9 f7       	brne	.-14     	; 0x136 <moveMotor+0x30>
 144:	08 95       	ret

00000146 <init>:
		_delay_ms(300);
	}
}

void init(){
	UBRR0H = 0;
 146:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 8;
 14a:	88 e0       	ldi	r24, 0x08	; 8
 14c:	89 b9       	out	0x09, r24	; 9

	UCSR0B = (1 << RXEN0) | (1 << TXEN0); // RXEN0, TXEN0 비트를 설정하여 송수신 활성화
 14e:	88 e1       	ldi	r24, 0x18	; 24
 150:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // UCSZ01, UCSZ00 비트를 설정하여 프레임 포맷 설정
 152:	86 e0       	ldi	r24, 0x06	; 6
 154:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>

	DDRA = 0xff; // 포트 A를 출력으로 설정
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	8a bb       	out	0x1a, r24	; 26
	
	DDRB = 0xFF;
 15c:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xcf;
 15e:	8f ec       	ldi	r24, 0xCF	; 207
 160:	82 b9       	out	0x02, r24	; 2
	PORTB = 0x00;
 162:	18 ba       	out	0x18, r1	; 24
	
	timer_init();
 164:	a4 df       	rcall	.-184    	; 0xae <timer_init>
	
	EICRB = 0x0A; // INT4 = falling edge
 166:	8a e0       	ldi	r24, 0x0A	; 10
 168:	8a bf       	out	0x3a, r24	; 58
	EIMSK = 0x30; // INT4 interrupt enable
 16a:	80 e3       	ldi	r24, 0x30	; 48
 16c:	89 bf       	out	0x39, r24	; 57
	SREG |= 1<<7;
 16e:	8f b7       	in	r24, 0x3f	; 63
 170:	80 68       	ori	r24, 0x80	; 128
 172:	8f bf       	out	0x3f, r24	; 63
 174:	08 95       	ret

00000176 <main>:
}

int main(void) {
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	2a 97       	sbiw	r28, 0x0a	; 10
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	f8 94       	cli
 184:	de bf       	out	0x3e, r29	; 62
 186:	0f be       	out	0x3f, r0	; 63
 188:	cd bf       	out	0x3d, r28	; 61
	unsigned char c;
	unsigned char buffer[10];
	unsigned int i = 0;

	init();
 18a:	dd df       	rcall	.-70     	; 0x146 <init>
	EICRB = 0x0A; // INT4 = falling edge
	EIMSK = 0x30; // INT4 interrupt enable
	SREG |= 1<<7;
}

int main(void) {
 18c:	00 e0       	ldi	r16, 0x00	; 0
	unsigned int i = 0;

	init();

	while (1) {
		c = getchar0();
 18e:	10 e0       	ldi	r17, 0x00	; 0
 190:	b6 df       	rcall	.-148    	; 0xfe <getchar0>

		buffer[i] = c;
 192:	e1 e0       	ldi	r30, 0x01	; 1
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	ec 0f       	add	r30, r28
 198:	fd 1f       	adc	r31, r29
 19a:	e0 0f       	add	r30, r16
 19c:	f1 1f       	adc	r31, r17
 19e:	80 83       	st	Z, r24
		i++;
 1a0:	0f 5f       	subi	r16, 0xFF	; 255
 1a2:	1f 4f       	sbci	r17, 0xFF	; 255

		if (c == '\r') {
 1a4:	8d 30       	cpi	r24, 0x0D	; 13
 1a6:	a1 f7       	brne	.-24     	; 0x190 <main+0x1a>
			i = 0;
			if (buffer[0] == 'o' && buffer[1] == 'p' && buffer[2] == 'e' && buffer[3] == 'n' && buffer[4] == '\r') {
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
 1aa:	8f 36       	cpi	r24, 0x6F	; 111
 1ac:	79 f4       	brne	.+30     	; 0x1cc <main+0x56>
 1ae:	8a 81       	ldd	r24, Y+2	; 0x02
 1b0:	80 37       	cpi	r24, 0x70	; 112
 1b2:	61 f4       	brne	.+24     	; 0x1cc <main+0x56>
 1b4:	8b 81       	ldd	r24, Y+3	; 0x03
 1b6:	85 36       	cpi	r24, 0x65	; 101
 1b8:	49 f4       	brne	.+18     	; 0x1cc <main+0x56>
 1ba:	8c 81       	ldd	r24, Y+4	; 0x04
 1bc:	8e 36       	cpi	r24, 0x6E	; 110
 1be:	31 f4       	brne	.+12     	; 0x1cc <main+0x56>
 1c0:	8d 81       	ldd	r24, Y+5	; 0x05
 1c2:	8d 30       	cpi	r24, 0x0D	; 13
				moveMotor(true);
 1c4:	19 f4       	brne	.+6      	; 0x1cc <main+0x56>
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	9e df       	rcall	.-196    	; 0x106 <moveMotor>
				} else {
				moveMotor(false);
 1ca:	e0 cf       	rjmp	.-64     	; 0x18c <main+0x16>
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	9b df       	rcall	.-202    	; 0x106 <moveMotor>
 1d0:	dd cf       	rjmp	.-70     	; 0x18c <main+0x16>

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
